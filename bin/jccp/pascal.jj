/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(pascal)
package jccp;

public class pascal
{
  public static void main(String args []) throws ParseException
  {
    pascal parser = new pascal(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter a define  like:| VAR myVar , b  : INTEGER; myArray : ARRAY[1..5] OF INTEGER; :");
      try
      {
        switch (pascal.define())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        pascal.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(pascal)
	/**
	 * Parse a define.
	 * 
	 * <pre>
	 * 
	 * 
	 *   define ::= VAR LISTOFVARS {LISTFVARS}+
	 *   
	 *   LISTOFVARS = IDENTIFIER {COMMA  IDENTIFIER}+ COLON TYPEREF SEMI
	 *   TYPEREF =  ARRAYREF | TYPE  |IDENTIFIER 
	 * 	     ARRAYREF = ARRAY LBRACK INT_LITERAL DOT DOT INT_LITERAL RBRACK OF TYPEREF      		
	 *             				|
	 * 
	 * 
	 * </pre>
	 */
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}


TOKEN : /*KEYWORDS*/
{
  < VAR  : "VAR" > |
  < ARRAY : "ARRAY" >|
  < OF: "OF">
  
}

TOKEN :
{
  < TYPE : <INTEGER> |  <CHAR>| < REAL> >
  
}

TOKEN : /* TYPES*/
{
  <INTEGER : "INTEGER" > |
  <CHAR : "CHARACTER" > |
  < REAL: "REAL" > 
}

TOKEN : /*SIGNS*/
{
   <COMMA : "," > | 
   <SEMI : ";" > | 
   <COLON : ":" > |
   <DOT : "." > |
   <LBRACK : "[" > |
   <RBRACK : "]" > 
  
}


TOKEN :
{
  < IDENTIFIER : (<LETTER>)+ >|
  < #LETTER : ["A" - "z"]>
}


int define ():
{
}
{
  <VAR>
  listOfVars()  
  {
    return 0;
  }
| "!"
  {
    return 1;
  }
}

void listOfVars():
{
}
{
   <IDENTIFIER>
   |("," listOfVars())+

    ":"
    typeRef()
    ";"
}

void typeRef():
{}
{
  arrayRef() | <TYPE> //| <IDENTIFIER>
}


void arrayRef():
{}
{
  < ARRAY > "[" <CONSTANT > ".." <CONSTANT > "]"<OF > typeRef()   
}

//
//int one_line() :
//{}
//{
//  sum() ";"
//  {
//    return 0;
//  }
//| ";"
//  {
//    return 1;
//  }
//}
//
//void sum() :
//{}
//{
//  term()
//  (
//    (
//      < PLUS >
//    | < MINUS >
//    )
//    term()
//  )*
//}
//
//void term() :
//{}
//{
//  unary()
//  (
//    (
//      < MULTIPLY >
//    | < DIVIDE >
//    )
//    unary()
//  )*
//}
//
//void unary() :
//{}
//{
//  < MINUS > element()
//| element()
//}
//
//void element() :
//{}
//{
//  < CONSTANT >
//| "(" sum() ")"
//}
